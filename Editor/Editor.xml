<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Editor</name>
    </assembly>
    <members>
        <member name="T:Alis.Editor.Engine">
            <summary>Manage the engine</summary>
        </member>
        <member name="F:Alis.Editor.Engine.args">
            <summary>The arguments</summary>
        </member>
        <member name="M:Alis.Editor.Engine.#ctor(System.String[])">
            <summary>Initializes a new instance of the <see cref="T:Alis.Editor.Engine" /> class.</summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="P:Alis.Editor.Engine.FirstInstance">
            <summary>Gets a value indicating whether [first instance].</summary>
            <value>
            <c>true</c> if [first instance]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Alis.Editor.Engine.Start">
            <summary>Starts this instance.</summary>
            <returns>Return 0 or -1 to indicate the exit value</returns>
        </member>
        <member name="T:Alis.Editor.Program">
            <summary>Run the engine</summary>
        </member>
        <member name="M:Alis.Editor.Program.Main(System.String[])">
            <summary>Mains the specified arguments.</summary>
            <param name="args">The arguments.</param>
            <returns>Return 0 or -1 to indicate the exit value.</returns>
        </member>
        <member name="T:Alis.Editor.Console">
            <summary>Console widget </summary>
        </member>
        <member name="F:Alis.Editor.Console.filterPtr">
            <summary>The filter PTR</summary>
        </member>
        <member name="F:Alis.Editor.Console.isOpen">
            <summary>The is open</summary>
        </member>
        <member name="F:Alis.Editor.Console.log">
            <summary>The log</summary>
        </member>
        <member name="M:Alis.Editor.Console.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Alis.Editor.Console" /> class.</summary>
        </member>
        <member name="M:Alis.Editor.Console.Clear">
            <summary>Clears this instance.</summary>
        </member>
        <member name="M:Alis.Editor.Console.Draw">
            <summary>Draws this instance.</summary>
        </member>
        <member name="T:Alis.Editor.Consumer">
            <summary>Consumer</summary>
        </member>
        <member name="T:Alis.Editor.WidgetManager">
            <summary>Widget Manager</summary>
        </member>
        <member name="F:Alis.Editor.WidgetManager.widgetEvents">
            <summary>The widget events</summary>
        </member>
        <member name="F:Alis.Editor.WidgetManager.widgets">
            <summary>The widgets</summary>
        </member>
        <member name="F:Alis.Editor.WidgetManager.pendingEvents">
            <summary>The pending events</summary>
        </member>
        <member name="M:Alis.Editor.WidgetManager.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alis.Editor.WidgetManager" /> class.</summary>
        </member>
        <member name="E:Alis.Editor.WidgetManager.EventHandler">
            <summary>Occurs when [event handler].</summary>
        </member>
        <member name="M:Alis.Editor.WidgetManager.Update">
            <summary>Draws this instance.</summary>
        </member>
        <member name="M:Alis.Editor.WidgetManager.ProcessOpenConsole(Alis.Editor.WidgetManager)">
            <summary>Invokes the open console.</summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Alis.Editor.WidgetManager.ProcessCloseConsole(Alis.Editor.WidgetManager)">
            <summary>Invokes the close console.</summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Alis.Editor.WidgetManager.ManageEventHandler(System.Object,Alis.Editor.EventType)">
            <summary>Manages the event handler.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="T:Alis.Editor.WidgetType">
            <summary>Widget Type</summary>
        </member>
        <member name="F:Alis.Editor.WidgetType.Console">
            <summary>The console</summary>
        </member>
        <member name="F:Alis.Editor.WidgetType.TopMenu">
            <summary>The top menu</summary>
        </member>
        <member name="T:ImGuiNET.ImGuiController">
            <summary>
            A modified version of Veldrid.ImGui's ImGuiRenderer.
            Manages input for ImGui and handles rendering ImGui's DrawLists with Veldrid.
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.#ctor(Veldrid.GraphicsDevice,Veldrid.Sdl2.Sdl2Window,Veldrid.OutputDescription,System.Int32,System.Int32)">
            <summary>
            Constructs a new ImGuiController.
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.GetOrCreateImGuiBinding(Veldrid.ResourceFactory,Veldrid.TextureView)">
            <summary>
            Gets or creates a handle for a texture to be drawn with ImGui.
            Pass the returned handle to Image() or ImageButton().
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.GetOrCreateImGuiBinding(Veldrid.ResourceFactory,Veldrid.Texture)">
            <summary>
            Gets or creates a handle for a texture to be drawn with ImGui.
            Pass the returned handle to Image() or ImageButton().
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.GetImageResourceSet(System.IntPtr)">
            <summary>
            Retrieves the shader texture binding for the given helper handle.
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.RecreateFontDeviceTexture(Veldrid.GraphicsDevice)">
            <summary>
            Recreates the device texture used to render text.
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.Render(Veldrid.GraphicsDevice,Veldrid.CommandList)">
            <summary>
            Renders the ImGui draw list data.
            This method requires a <see cref="T:Veldrid.GraphicsDevice"/> because it may create new DeviceBuffers if the size of vertex
            or index data has increased beyond the capacity of the existing buffers.
            A <see cref="T:Veldrid.CommandList"/> is needed to submit drawing and resource update commands.
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.Update(System.Single,Veldrid.InputSnapshot)">
            <summary>
            Updates ImGui input and IO configuration state.
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.SetPerFrameImGuiData(System.Single)">
            <summary>
            Sets per-frame data based on the associated window.
            This is called by Update(float).
            </summary>
        </member>
        <member name="M:ImGuiNET.ImGuiController.Dispose">
            <summary>
            Frees all graphics resources used by the renderer.
            </summary>
        </member>
    </members>
</doc>
